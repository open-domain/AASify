import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { AaSifyGeneratedModule, AASifyGeneratedSharedModule } from './generated/module.js';
import { AasifyValidator, registerValidationChecks } from './validator.js';
import { IndentationAwareTokenBuilder, IndentationAwareLexer } from 'langium';
import * as ast from './generated/ast.js';
import { AasifyScopeComputation } from './scope-computation.js';
import { AasifyScopeProvider } from './scope-provider.js';
import { AasifySemanticTokenProvider } from './semantic-token-provider.js';
import { AasifyCompletionProvider } from './completion-provider.js';
import { AasifyNameProvider } from './naming.js';
import { AasifyHoverProvider } from './hover-provider.js';
import chalk from 'chalk';

export type AasifyAsts = ast.AasModel | ast.AasDefinition | ast.SubmodelRulesDefinition | ast.SubmodelDefinitions;

/**
 * Declaration of custom services - add your own service classes here.
 */
export type AasifyAddedServices = {
    validation: {
        AasifyValidator: AasifyValidator
    },
    references: {
        ScopeComputation: AasifyScopeComputation,
        ScopeProvider: AasifyScopeProvider
    },
    lsp: {
        SemanticTokenProvider: AasifySemanticTokenProvider,
        CompletionProvider : AasifyCompletionProvider
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type AasifyServices = LangiumServices & AasifyAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const AasifyModule: Module<AasifyServices, PartialLangiumServices & AasifyAddedServices> = {
    validation: {
        AasifyValidator     : () => new AasifyValidator()
    },
    references: {
        NameProvider        : () => new AasifyNameProvider(),
        ScopeComputation    : (services) => new AasifyScopeComputation(services),
        ScopeProvider       : (services) => new AasifyScopeProvider(services)
    },
    lsp: {
        HoverProvider           : (services) => new AasifyHoverProvider(services),
        SemanticTokenProvider   : (services) => new AasifySemanticTokenProvider(services),
        CompletionProvider      : (services) => new AasifyCompletionProvider(services)
    },
    workspace: {},
    serializer: {},
    parser: {
        TokenBuilder: () => new IndentationAwareTokenBuilder({
            indentTokenName: 'INDENT',
            dedentTokenName: 'DEDENT',
            whitespaceTokenName: 'WS',
            ignoreIndentationDelimiters: [['[', ']'], ['(', ')']] // Optional: Ignore indentation inside brackets
        }),
        Lexer: (services) => new IndentationAwareLexer(services),
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createAasifyServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    AasifyLanguage: AasifyServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        AASifyGeneratedSharedModule
    );
    const Aasify = inject(
        createDefaultModule({ shared }),
        AaSifyGeneratedModule,
        AasifyModule
    );
    shared.ServiceRegistry.register(Aasify);
    registerValidationChecks(Aasify);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    console.log(chalk.yellow(`Aasify extension service created`));
    return { shared, AasifyLanguage: Aasify };
}
